{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\redomat\\\\react-multi-page-website\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter, Routes, Route, Link } from 'react-router-dom';\nimport './App.css'; //import CreateUser from './components/CreateUser';\n//import EditUser from './components/EditUser';\n//import ListNumber from './components/ListNumber';\n//import GetNumber from './components/GetNumber';\n//import ActivateNumber from './components/ActivateNumber';\n//import { w3cwebsocket as WebSocket } from \"websocket\";\n//import React, { useState, useCallback, useEffect } from 'react';\n//import useWebSocket, { ReadyState } from 'react-use-websocket';\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState('Tarzan');\n  const [message, setMessage] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [ws, setWs] = useState(new WebSocket(URL));\n\n  const submitMessage = (usr, msg) => {\n    const message = {\n      user: usr,\n      message: msg\n    };\n    ws.send(JSON.stringify(message));\n    setMessages([message, ...messages]);\n  };\n\n  useEffect(() => {\n    ws.onopen = () => {\n      console.log('WebSocket Connected');\n    };\n\n    ws.onmessage = e => {\n      const message = JSON.parse(e.data);\n      setMessages([message, ...messages]);\n    };\n\n    return () => {\n      ws.onclose = () => {\n        console.log('WebSocket Disconnected');\n        setWs(new WebSocket(URL));\n      };\n    };\n  }, [ws.onmessage, ws.onopen, ws.onclose, messages]);\n  /*\n    //Public API that will echo messages sent to it back to the client\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3000');\n  const [messageHistory, setMessageHistory] = useState([]);\n   const {\n    sendMessage,\n    lastMessage,\n    readyState,\n  } = useWebSocket(socketUrl);\n   useEffect(() => {\n    if (lastMessage !== null) {\n      setMessageHistory(prev => prev.concat(lastMessage));\n    }\n  }, [lastMessage, setMessageHistory]);\n   const handleClickChangeSocketUrl = useCallback(() =>\n    setSocketUrl('ws://localhost:3000', 'echo-protocol'), []);\n   const handleClickSendMessage = useCallback(() =>\n    sendMessage('Hello'), []);\n   const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n   window.WebSocket = window.WebSocket || window.MozWebSocket;\n    var connection = new WebSocket('ws://127.0.0.1:8080/redomat/react-multi-page-website/api/index.php');\n    console.log(connection);\n  \n      connection.onopen = function () {\n          // connection is opened and ready to use\n          alert('connection Jej');\n        };\n      \n        connection.onerror = function (error) {\n          // an error occurred when sending/receiving data\n          alert('Greska');\n        };\n      \n        connection.onmessage = function (message) {\n          alert('Jej');\n          \n        };*/\n\n  return (\n    /*#__PURE__*/\n\n    /*<div className=\"App\">\n      <BrowserRouter>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Trenutni broj</Link>\n            </li>\n            <li>\n              <Link to=\"counts/get\">Uzmite broj</Link>\n            </li>\n            <li>\n              <Link to=\"counts/activate\">Aktiviraj broj</Link>\n            </li>\n          </ul>\n        </nav>\n        <Routes>\n          <Route index element={<ListNumber />} />\n          <Route path=\"counts/get\" element={<GetNumber />} />\n          <Route path=\"counts/activate\" element={<ActivateNumber />} />\n          <Route path=\"counts/create\" element={<CreateUser />} />\n          <Route path=\"counts/:id/edit\" element={<EditUser />} />\n        </Routes>\n      </BrowserRouter>\n    </div>*/\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user\",\n        children: [\"Name :\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"user\",\n          placeholder: \"User\",\n          value: user,\n          onChange: e => setUser(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: messages.reverse().map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: message.user\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 16\n          }, this), \": \", /*#__PURE__*/_jsxDEV(\"em\", {\n            children: message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 39\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 14\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"\",\n        onSubmit: e => {\n          e.preventDefault();\n          submitMessage(user, message);\n          setMessage([]);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: 'Type a message ...',\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(App, \"nDXn24+tv4wsafDT8oLBumpHgrY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/xampp/htdocs/redomat/react-multi-page-website/src/App.js"],"names":["BrowserRouter","Routes","Route","Link","React","useState","useEffect","App","user","setUser","message","setMessage","messages","setMessages","ws","setWs","WebSocket","URL","submitMessage","usr","msg","send","JSON","stringify","onopen","console","log","onmessage","e","parse","data","onclose","target","value","reverse","map","index","preventDefault"],"mappings":"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","sourcesContent":["import {BrowserRouter, Routes, Route, Link} from 'react-router-dom';\nimport './App.css';\n//import CreateUser from './components/CreateUser';\n//import EditUser from './components/EditUser';\n//import ListNumber from './components/ListNumber';\n//import GetNumber from './components/GetNumber';\n//import ActivateNumber from './components/ActivateNumber';\n\n//import { w3cwebsocket as WebSocket } from \"websocket\";\n//import React, { useState, useCallback, useEffect } from 'react';\n//import useWebSocket, { ReadyState } from 'react-use-websocket';\n\nimport React, { useState, useEffect } from \"react\";\n\n\nfunction App() {\n\n  const [user, setUser] = useState('Tarzan');\n  \tconst [message, setMessage] = useState([]);\n  \tconst [messages, setMessages] = useState([]);\n  \tconst [ws, setWs] = useState(new WebSocket(URL));\n\n  \tconst submitMessage = (usr, msg) => {\n  \t\tconst message = { user: usr, message: msg };\n  \t\tws.send(JSON.stringify(message));\n  \t\tsetMessages([message, ...messages]);\n  \t}\n\n  \tuseEffect(() => {\n\t    ws.onopen = () => {\n\t      console.log('WebSocket Connected');\n\t    }\n\n\t    ws.onmessage = (e) => {\n\t      const message = JSON.parse(e.data);\n\t      setMessages([message, ...messages]);\n\t    }\n\n\t    return () => {\n\t      ws.onclose = () => {\n\t        console.log('WebSocket Disconnected');\n\t        setWs(new WebSocket(URL));\n\t      }\n\t    }\n  \t}, [ws.onmessage, ws.onopen, ws.onclose, messages]);\n\n  /*\n    //Public API that will echo messages sent to it back to the client\n  const [socketUrl, setSocketUrl] = useState('ws://localhost:3000');\n  const [messageHistory, setMessageHistory] = useState([]);\n\n  const {\n    sendMessage,\n    lastMessage,\n    readyState,\n  } = useWebSocket(socketUrl);\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      setMessageHistory(prev => prev.concat(lastMessage));\n    }\n  }, [lastMessage, setMessageHistory]);\n\n  const handleClickChangeSocketUrl = useCallback(() =>\n    setSocketUrl('ws://localhost:3000', 'echo-protocol'), []);\n\n  const handleClickSendMessage = useCallback(() =>\n    sendMessage('Hello'), []);\n\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: 'Connecting',\n    [ReadyState.OPEN]: 'Open',\n    [ReadyState.CLOSING]: 'Closing',\n    [ReadyState.CLOSED]: 'Closed',\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\n  }[readyState];\n\n  window.WebSocket = window.WebSocket || window.MozWebSocket;\n    var connection = new WebSocket('ws://127.0.0.1:8080/redomat/react-multi-page-website/api/index.php');\n    console.log(connection);\n  \n      connection.onopen = function () {\n          // connection is opened and ready to use\n          alert('connection Jej');\n        };\n      \n        connection.onerror = function (error) {\n          // an error occurred when sending/receiving data\n          alert('Greska');\n        };\n      \n        connection.onmessage = function (message) {\n          alert('Jej');\n          \n        };*/\n\n  return (\n    /*<div className=\"App\">\n      <BrowserRouter>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Trenutni broj</Link>\n            </li>\n            <li>\n              <Link to=\"counts/get\">Uzmite broj</Link>\n            </li>\n            <li>\n              <Link to=\"counts/activate\">Aktiviraj broj</Link>\n            </li>\n          </ul>\n        </nav>\n        <Routes>\n          <Route index element={<ListNumber />} />\n          <Route path=\"counts/get\" element={<GetNumber />} />\n          <Route path=\"counts/activate\" element={<ActivateNumber />} />\n          <Route path=\"counts/create\" element={<CreateUser />} />\n          <Route path=\"counts/:id/edit\" element={<EditUser />} />\n        </Routes>\n      </BrowserRouter>\n    </div>*/\n\n    <div>\n\t        <label htmlFor=\"user\">\n\t          Name :\n\t          <input\n\t            type=\"text\"\n\t            id=\"user\"\n\t            placeholder=\"User\"\n\t            value={user}\n\t            onChange={e => setUser(e.target.value)}\n\t          />\n\t        </label>\n\n\t        <ul>\n\t          {messages.reverse().map((message, index) =>\n\t            <li key={index}>\n\t              <b>{message.user}</b>: <em>{message.message}</em>\n\t            </li>\n\t          )}\n\t        </ul>\n\n\t        <form\n\t          action=\"\"\n\t          onSubmit={e => {\n\t            e.preventDefault();\n\t            submitMessage(user, message);\n\t            setMessage([]);\n\t          }}\n\t        >\n\t          <input\n\t            type=\"text\"\n\t            placeholder={'Type a message ...'}\n\t            value={message}\n\t            onChange={e => setMessage(e.target.value)}\n\t          />\n\t          <input type=\"submit\" value={'Send'} />\n\t        </form>\n\t    </div>\n    \n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}